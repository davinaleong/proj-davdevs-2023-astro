// C. Maps

// C.1. Colors
$colors: (
  "gray": (
    50: hsl(0, 0%, 98%),
    100: hsl(0, 0%, 96%),
    200: hsl(0, 0%, 93%),
    300: hsl(0, 0%, 88%),
    400: hsl(0, 0%, 74%),
    500: hsl(0, 0%, 62%),
    600: hsl(0, 0%, 46%),
    700: hsl(0, 0%, 38%),
    800: hsl(0, 0%, 26%),
    900: hsl(0, 0%, 13%),
  ),
  "red": (
    50: hsl(351, 100%, 96%),
    100: hsl(354, 100%, 90%),
    200: hsl(0, 73%, 77%),
    300: hsl(0, 69%, 67%),
    400: hsl(1, 83%, 63%),
    500: hsl(4, 90%, 58%),
    600: hsl(1, 77%, 55%),
    700: hsl(0, 65%, 51%),
    800: hsl(0, 66%, 47%),
    900: hsl(0, 73%, 41%),
  ),
  "pink": (
    50: hsl(338, 81%, 94%),
    100: hsl(340, 82%, 85%),
    200: hsl(340, 82%, 76%),
    300: hsl(340, 83%, 66%),
    400: hsl(340, 82%, 59%),
    500: hsl(340, 82%, 52%),
    600: hsl(338, 78%, 48%),
    700: hsl(336, 78%, 43%),
    800: hsl(334, 79%, 38%),
    900: hsl(328, 81%, 29%),
  ),
  "purple": (
    50: hsl(292, 44%, 93%),
    100: hsl(291, 47%, 83%),
    200: hsl(291, 47%, 71%),
    300: hsl(291, 47%, 60%),
    400: hsl(291, 47%, 51%),
    500: hsl(291, 64%, 42%),
    600: hsl(287, 65%, 40%),
    700: hsl(282, 68%, 38%),
    800: hsl(277, 70%, 35%),
    900: hsl(267, 75%, 31%),
  ),
  "deep-purple": (
    50: hsl(264, 45%, 94%),
    100: hsl(261, 46%, 84%),
    200: hsl(261, 46%, 74%),
    300: hsl(262, 47%, 63%),
    400: hsl(262, 47%, 55%),
    500: hsl(262, 52%, 47%),
    600: hsl(260, 54%, 45%),
    700: hsl(258, 58%, 42%),
    800: hsl(255, 61%, 39%),
    900: hsl(251, 69%, 34%),
  ),
  "indigo": (
    50: hsl(231, 44%, 94%),
    100: hsl(232, 45%, 84%),
    200: hsl(231, 44%, 74%),
    300: hsl(230, 44%, 64%),
    400: hsl(231, 44%, 56%),
    500: hsl(231, 48%, 48%),
    600: hsl(232, 50%, 45%),
    700: hsl(232, 54%, 41%),
    800: hsl(233, 57%, 37%),
    900: hsl(235, 66%, 30%),
  ),
  "blue": (
    50: hsl(205, 87%, 94%),
    100: hsl(207, 89%, 86%),
    200: hsl(207, 90%, 77%),
    300: hsl(207, 89%, 68%),
    400: hsl(207, 90%, 61%),
    500: hsl(207, 90%, 54%),
    600: hsl(208, 79%, 51%),
    700: hsl(210, 79%, 46%),
    800: hsl(212, 80%, 42%),
    900: hsl(216, 85%, 34%),
  ),
  "light-blue": (
    50: hsl(199, 94%, 94%),
    100: hsl(199, 92%, 85%),
    200: hsl(199, 92%, 74%),
    300: hsl(199, 91%, 64%),
    400: hsl(199, 92%, 56%),
    500: hsl(199, 98%, 48%),
    600: hsl(200, 97%, 45%),
    700: hsl(201, 98%, 41%),
    800: hsl(202, 98%, 37%),
    900: hsl(206, 99%, 31%),
  ),
  "cyan": (
    50: hsl(187, 72%, 93%),
    100: hsl(187, 71%, 82%),
    200: hsl(187, 72%, 71%),
    300: hsl(187, 71%, 59%),
    400: hsl(187, 71%, 50%),
    500: hsl(187, 100%, 42%),
    600: hsl(187, 100%, 38%),
    700: hsl(186, 100%, 33%),
    800: hsl(185, 100%, 28%),
    900: hsl(182, 100%, 20%),
  ),
  "teal": (
    50: hsl(177, 41%, 91%),
    100: hsl(175, 41%, 79%),
    200: hsl(174, 42%, 65%),
    300: hsl(174, 42%, 51%),
    400: hsl(174, 63%, 40%),
    500: hsl(174, 100%, 29%),
    600: hsl(174, 100%, 27%),
    700: hsl(173, 100%, 24%),
    800: hsl(173, 100%, 21%),
    900: hsl(170, 100%, 15%),
  ),
  "green": (
    50: hsl(125, 39%, 94%),
    100: hsl(122, 38%, 84%),
    200: hsl(122, 37%, 74%),
    300: hsl(123, 38%, 64%),
    400: hsl(123, 38%, 57%),
    500: hsl(122, 39%, 49%),
    600: hsl(123, 41%, 45%),
    700: hsl(123, 43%, 39%),
    800: hsl(123, 46%, 34%),
    900: hsl(124, 55%, 24%),
  ),
  "light-green": (
    50: hsl(88, 52%, 94%),
    100: hsl(88, 51%, 86%),
    200: hsl(88, 50%, 76%),
    300: hsl(88, 50%, 67%),
    400: hsl(88, 50%, 60%),
    500: hsl(88, 50%, 53%),
    600: hsl(89, 46%, 48%),
    700: hsl(92, 48%, 42%),
    800: hsl(95, 49%, 36%),
    900: hsl(103, 56%, 26%),
  ),
  "lime": (
    50: hsl(66, 71%, 95%),
    100: hsl(65, 69%, 86%),
    200: hsl(66, 71%, 77%),
    300: hsl(66, 70%, 68%),
    400: hsl(66, 70%, 61%),
    500: hsl(66, 70%, 54%),
    600: hsl(64, 60%, 50%),
    700: hsl(62, 61%, 44%),
    800: hsl(60, 63%, 38%),
    900: hsl(54, 70%, 30%),
  ),
  "yellow": (
    50: hsl(55, 100%, 95%),
    100: hsl(54, 100%, 88%),
    200: hsl(54, 100%, 81%),
    300: hsl(54, 100%, 73%),
    400: hsl(54, 100%, 67%),
    500: hsl(54, 100%, 62%),
    600: hsl(49, 98%, 60%),
    700: hsl(43, 96%, 58%),
    800: hsl(37, 95%, 56%),
    900: hsl(28, 92%, 53%),
  ),
  "amber": (
    50: hsl(46, 100%, 94%),
    100: hsl(45, 100%, 85%),
    200: hsl(45, 100%, 75%),
    300: hsl(46, 100%, 65%),
    400: hsl(45, 100%, 58%),
    500: hsl(45, 100%, 51%),
    600: hsl(42, 100%, 50%),
    700: hsl(38, 100%, 50%),
    800: hsl(34, 100%, 50%),
    900: hsl(26, 100%, 50%),
  ),
  "orange": (
    50: hsl(37, 100%, 94%),
    100: hsl(36, 100%, 85%),
    200: hsl(36, 100%, 75%),
    300: hsl(36, 100%, 65%),
    400: hsl(36, 100%, 57%),
    500: hsl(36, 100%, 50%),
    600: hsl(33, 100%, 49%),
    700: hsl(30, 100%, 48%),
    800: hsl(27, 100%, 47%),
    900: hsl(21, 100%, 45%),
  ),
  "deep-orange": (
    50: hsl(6, 71%, 95%),
    100: hsl(14, 100%, 87%),
    200: hsl(14, 100%, 78%),
    300: hsl(14, 100%, 70%),
    400: hsl(14, 100%, 63%),
    500: hsl(14, 100%, 57%),
    600: hsl(14, 91%, 54%),
    700: hsl(14, 80%, 50%),
    800: hsl(14, 82%, 46%),
    900: hsl(14, 88%, 40%),
  ),
  "brown": (
    50: hsl(20, 16%, 93%),
    100: hsl(16, 16%, 81%),
    200: hsl(15, 15%, 69%),
    300: hsl(16, 15%, 56%),
    400: hsl(16, 18%, 47%),
    500: hsl(16, 25%, 38%),
    600: hsl(15, 25%, 34%),
    700: hsl(14, 26%, 29%),
    800: hsl(11, 26%, 24%),
    900: hsl(9, 28%, 19%),
  ),
  "blue-gray": (
    50: hsl(204, 15%, 94%),
    100: hsl(198, 16%, 84%),
    200: hsl(200, 15%, 73%),
    300: hsl(200, 16%, 62%),
    400: hsl(200, 15%, 54%),
    500: hsl(200, 18%, 46%),
    600: hsl(199, 18%, 40%),
    700: hsl(199, 18%, 33%),
    800: hsl(200, 18%, 26%),
    900: hsl(200, 19%, 18%),
  ),
  "html": (
    400: hsl(13, 79%, 51%),
  ),
  "css": (
    400: hsl(221, 88%, 54%),
  ),
  "javascript": (
    400: hsl(54, 100%, 61%),
  ),
  "bootstrap": (
    400: hsl(260, 94%, 57%),
  ),
  "react": (
    400: hsl(193, 86%, 66%),
  ),
  "laravel": (
    400: hsl(3, 100%, 56%),
  ),
);

@function color($color, $tint) {
  $map: map-get($colors, $color);
  @if $map {
    @return map-get($map, $tint);
  } @else {
    @return "";
  }
}

// C.2. Font Families
$families: (
  "primary": #{Nunito,
  Arial,
  sans-serif},
  "secondary": #{Montserrat,
  Verdana,
  sans-serif},
  "monospace": #{"Anonymous Pro",
  "Courier New",
  monospace},
);

@function family($family) {
  $value: map-get($families, $family);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.3. Font Sizes
$fsizes: (
  base: 16px,
  100: #{clamp(0.7rem, 1rem + 1vw, 0.8rem)},
  200: #{clamp(0.8rem, 1rem + 1vw, 0.9rem)},
  300: #{clamp(0.9rem, 1rem + 1vw, 1rem)},
  400: #{clamp(1rem, 1rem + 1vw, 1.25rem)},
  500: #{clamp(1.25rem, 1rem + 1vw, 1.5rem)},
  600: #{clamp(1.5rem, 1rem + 2vw, 2rem)},
  700: #{clamp(2rem, 1rem + 3vw, 3rem)},
  800: #{clamp(3rem, 1rem + 3vw, 4rem)},
  900: #{clamp(4rem, 1rem + 5vw, 8rem)},
  1000: #{clamp(6rem, 1rem + 7vw, 10rem)},
);

@function fsize($fsize) {
  $value: map-get($fsizes, $fsize);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.4. Font Weights
$weights: (
  "thin": 100,
  "extra-light": 200,
  "light": 300,
  "regular": 400,
  "medium": 500,
  "semibold": 600,
  "bold": 700,
  "extra-bold": 800,
  "black": 900,
);

@function weight($weight) {
  $value: map-get($weights, $weight);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.5. Font Styles
$styles: (
  "normal": normal,
  "italic": italic,
  "oblique": oblique,
);

@function style($style) {
  $value: map-get($styles, $style);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.6. Spacers
$sizes: (
  "auto": auto,
  0: 0,
  10: 0.1rem,
  50: 0.2rem,
  100: 0.5rem,
  200: 0.75rem,
  300: 1rem,
  400: 1.5rem,
  500: 2rem,
  600: 3rem,
  700: 4rem,
  800: 5rem,
  900: 6rem,
  1000: 7rem,
);

@function size($size) {
  $value: map-get($sizes, $size);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

@function border-radius($size) {
  $value: map-get($sizes, $size);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

$r-sizes: (
  "auto": auto,
  0: 0,
  10: 0.1em,
  50: 0.2em,
  100: 0.5em,
  200: 0.75em,
  300: 1em,
  400: 1.5em,
  500: 2em,
  600: 3em,
  700: 4em,
  800: 5em,
  900: 6em,
  1000: 7em,
);

@function r-size($r-size) {
  $value: map-get($r-sizes, $r-size);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

@function r-border-radius($r-size) {
  $value: map-get($r-sizes, $r-size);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.7. Text Decorations
$decorations: (
  "none": none,
  "overline": overline,
  "underline": underline,
  "line-through": line-through,
  "wavy": wavy,
  "dotted": dotted,
  "dashed": dashed,
);

@function decoration($decoration) {
  $value: map-get($decorations, $decoration);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.8. Text Transforms
$transforms: (
  "none": none,
  "lowercase": lowercase,
  "uppercase": uppercase,
  "caplitalize": capitalize,
);

@function transform($transform) {
  $value: map-get($transforms, $transform);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.9. Text Aligns
$aligns: (
  "left": left,
  "center": center,
  "right": right,
  "justify": justify,
);

@function align($align) {
  $value: map-get($aligns, $align);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.10. Displays
$displays: (
  "none": none,
  "inline": inline,
  "block": block,
  "inline-block": inline-block,
  "flex": flex,
  "inline-flex": inline-flex,
  "grid": grid,
  "inline-grid": inline-grid,
);

@function display($display) {
  $value: map-get($displays, $display);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.10.a. Align Items
$align-items: (
  "start": start,
  "flex-start": flex-start,
  "center": center,
  "end": end,
  "flex-end": flex-end,
  "stretch": stretch,
  "baseline": baseline,
);

@function align-item($align-item) {
  $value: map-get($align-items, $align-item);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.10.b. Justify Contents
$justify-contents: (
  "flex-start": flex-start,
  "center": center,
  "flex-end": flex-end,
  "space-around": space-around,
  "space-between": space-between,
  "space-evenly": space-evenly,
);

@function justify-content($justify-content) {
  $value: map-get($justify-contents, $justify-content);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.10.c. Justify Items
$justify-items: (
  "stretch": stretch,
  "center": center,
  "start": start,
  "end": end,
);

@function justify-item($justify-item) {
  $value: map-get($justify-items, $justify-item);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.11. Box Shadows
$box-shadows: (
  400: #{0.1em 0.1em 0.3em 0 hsla(0, 0%, 0%, 0.2)},
);

@function box-shadow($box-shadow) {
  $value: map-get($box-shadows, $box-shadow);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.12. Letter Spacing
$letter-spacings: (
  "auto": auto,
  50: 0,
  100: 0.03em,
  200: 0.05em,
  300: 0.08em,
  400: 0.1em,
  500: 0.3em,
);

@function letter-spacing($letter-spacing) {
  $value: map-get($letter-spacings, $letter-spacing);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.13. Positions
$positions: (
  "static": static,
  "relative": relative,
  "absolute": absolute,
  "sticky": sticky,
);

@function position($position) {
  $value: map-get($positions, $position);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.14. Line Heights
$line-heights: (
  "normal": normal,
  0: 0,
  100: 0.9em,
  200: 1.2em,
);

@function line-height($line-height) {
  $value: map-get($line-heights, $line-height);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}

// C.15. Breakpoints
$breakpoints: (
  "sm": 36em,
  "md": 48em,
  "lg": 62em,
  "xl": 75em,
  "xxl": 87.5em,
);

@function breakpoint($breakpoint) {
  $value: map-get($breakpoints, $breakpoint);
  @if $value {
    @return $value;
  } @else {
    @return "";
  }
}
